-- Peripherals
local mon    = peripheral.find("monitor")
local bridge = peripheral.find("meBridge") or peripheral.find("me_bridge") or peripheral.find("bridge")
local modem  = peripheral.find("modem")

if not mon then error("Monitor not found!") end
if not bridge then error("ME Bridge not found!") end
if not modem then error("Modem not found!") end

-- Monitor setup
mon.setTextScale(2)
mon.clear()

-- Colors
local CCColors = colors
local defaultColor = CCColors.white
local headerColor = CCColors.brown
local reactorNameColor = CCColors.yellow
local feColor = CCColors.white

-- Chemicals to track
local tracked = {
    {name = "mekanismgenerators:deuterium",   label = "Deuterium", color = CCColors.red},
    {name = "mekanismgenerators:tritium",     label = "Tritium",   color = CCColors.green},
    {name = "mekanismgenerators:fusion_fuel", label = "D-T Fuel",  color = CCColors.purple},
}

-- Table for reactors
local reactors = {}

-- Format numbers for chemicals (mB → B)
local function formatBuckets(mb)
    local b = mb / 1000 -- Millibuckets → Buckets
    if b >= 1e12 then return string.format("%.2f T B", b/1e12)
    elseif b >= 1e9 then return string.format("%.2f G B", b/1e9)
    elseif b >= 1e6 then return string.format("%.2f M B", b/1e6)
    elseif b >= 1e3 then return string.format("%.2f k B", b/1e3)
    else return string.format("%.2f B", b) end
end

-- Format numbers for FE (energy)
local function formatFE(n)
    if n >= 1e12 then return string.format("%.2f T FE", n/1e12)
    elseif n >= 1e9 then return string.format("%.2f G FE", n/1e9)
    elseif n >= 1e6 then return string.format("%.2f M FE", n/1e6)
    elseif n >= 1e3 then return string.format("%.2f k FE", n/1e3)
    else return string.format("%.2f FE", n) end
end

-- Write centered text
local function writeCentered(row, text, color)
    local w,_ = mon.getSize()
    local x = math.floor((w - #text) / 2) + 1
    mon.setCursorPos(x, row)
    if color then mon.setTextColor(color) end
    mon.write(text)
    mon.setTextColor(defaultColor)
end

-- Display Chemicals
local function displayChemicals(rowStart)
    local row = rowStart
    local ok, chemicals = pcall(function() return bridge.getChemicals() end)
    if not ok or type(chemicals) ~= "table" then
        writeCentered(row, "Error fetching chemicals")
        return row + 1
    end

    for _, chem in ipairs(tracked) do
        local amount = 0
        for _, entry in pairs(chemicals) do
            local name = entry.name or entry.chemical or ""
            if name == chem.name then
                amount = entry.count or 0 -- mB
            end
        end
        writeCentered(row, string.format("%s %s", chem.label, formatBuckets(amount)), chem.color)
        row = row + 2
    end
    return row
end

-- Display Reactors
local function displayReactors(rowStart)
    local row = rowStart
    for name, value in pairs(reactors) do
        writeCentered(row, name, reactorNameColor)
        row = row + 1
        writeCentered(row, formatFE(value), feColor)
        row = row + 2
    end
end

-- Open modem port
modem.open(0)

-- Main loop
while true do
    -- Warte auf neue Nachrichten von den Reaktoren
    local event, side, channel, replyChannel, message, distance = os.pullEvent("modem_message")
    if type(message) == "table" and message.name and message.value then
        reactors[message.name] = message.value

        -- Bildschirm sofort aktualisieren
        mon.clear()
        local row = 1
        writeCentered(row, "Fusion Reactor Fuel", headerColor)
        row = row + 2
        row = displayChemicals(row)
        row = row + 1
        displayReactors(row)
    end
end
