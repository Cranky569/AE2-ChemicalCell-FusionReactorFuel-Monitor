-- Peripherals
local mon    = peripheral.find("monitor")
local bridge = peripheral.find("meBridge") or peripheral.find("me_bridge") or peripheral.find("bridge")

if not mon then error("Monitor nicht gefunden!") end
if not bridge then error("Bridge nicht gefunden!") end

mon.setTextScale(0.5)
mon.clear()

-- Farben für Chemicals
local colors = {
    deuterium = colors.red,
    tritium   = colors.green,
    dtfuel    = colors.purple
}

-- Chemical-Namen
local tracked = {
    {name = "mekanismgenerators:deuterium",   label = "Deuterium", color = colors.deuterium},
    {name = "mekanismgenerators:tritium",     label = "Tritium",   color = colors.tritium},
    {name = "mekanismgenerators:fusion_fuel", label = "D-T Fuel",  color = colors.dtfuel},
}

-- Max Bytes pro 256M Cell
local maxBytes = 268435456

-- Hilfsfunktion: Zahl in k/M/G umwandeln
local function formatAmount(n)
    if n >= 1000000000 then
        return string.format("%.2fG", n/1000000000)
    elseif n >= 1000000 then
        return string.format("%.2fM", n/1000000)
    elseif n >= 1000 then
        return string.format("%.2fk", n/1000)
    else
        return tostring(n)
    end
end

-- Hilfsfunktion für Textzeilen
local function writeLine(y, text, color)
    mon.setCursorPos(1, y)
    if color then mon.setTextColor(color) end
    mon.write(text)
    mon.setTextColor(colors.white) -- zurücksetzen
end

while true do
    mon.clear()
    local row = 1
    writeLine(row, "Fusion Reactor Fuel", colors.yellow)
    row = row + 2  -- Leerzeile nach Überschrift

    -- Chemicals abrufen
    local ok, chemicals = pcall(function() return bridge.getUsedChemicals() end)
    if not ok or type(chemicals) ~= "table" then
        writeLine(row, "Fehler beim Abrufen der Chemicals")
        sleep(2)
    else
        for _,chem in ipairs(tracked) do
            local amount = 0
            for _,entry in pairs(chemicals) do
                if entry.name == chem.name then
                    amount = entry.amount or entry.stored or 0
                end
            end
            writeLine(row, string.format("%s (count=%s)", chem.label, formatAmount(amount)), chem.color)
            row = row + 1
            row = row + 1  -- Leerzeile nach jedem Chemical
        end
        sleep(2)
    end
end
