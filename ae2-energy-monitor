local mon    = peripheral.find("monitor")
local bridge = peripheral.find("meBridge") or peripheral.find("me_bridge") or peripheral.find("bridge")

if not mon then error("Monitor nicht gefunden!") end
if not bridge then error("Bridge nicht gefunden!") end

mon.setTextScale(0.5)

local tracked = {
  {name = "mekanismgenerators:tritium",     label = "Tritium"},
  {name = "mekanismgenerators:deuterium",   label = "Deuterium"},
  {name = "mekanismgenerators:fusion_fuel", label = "D-T Fuel"}
}

local maxBytes = 268435456  -- pro 256M Cell

local function writeLine(y, text)
  mon.setCursorPos(1, y)
  mon.write(text)
end

while true do
  mon.clear()
  writeLine(1, "Chemical Storage Overview")

  local ok, usedChemicals = pcall(function() return bridge.getUsedChemicals() end)
  if not ok or type(usedChemicals) ~= "table" then
    writeLine(3, "Fehler: " .. tostring(usedChemicals))
    sleep(2)
    goto continue
  end

  local row = 3
  for _,chem in ipairs(tracked) do
    local amount = 0
    for _,entry in pairs(usedChemicals) do
      if entry.name == chem.name then
        amount = entry.amount or 0
      end
    end
    writeLine(row, string.format("%s: %d / %d Bytes", chem.label, amount, maxBytes))
    row = row + 1
  end

  ::continue::
  sleep(2)
end
