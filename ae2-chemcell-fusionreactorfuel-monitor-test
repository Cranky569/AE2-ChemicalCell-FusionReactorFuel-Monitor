-- Peripherals
local mon    = peripheral.find("monitor") -- Monitor
local modem  = peripheral.find("modem")   -- Modem fÃ¼r Reaktoren

if not mon then error("Monitor not found!") end
if not modem then error("Modem not found!") end

-- Monitor setup
mon.setTextScale(2)
mon.clear()

-- CC Colors table
local CCColors = colors
local defaultColor = CCColors.white
local headerColor = CCColors.brown
local reactorNameColor = CCColors.yellow
local feColor = CCColors.white

-- Reactor table
local reactors = {} -- { ["Reactor 1"] = 15.66, ... }

-- Format numbers for FE with a space before unit
local function formatFE(n)
    if n >= 1e12 then
        return string.format("%.2f T FE", n/1e12)
    elseif n >= 1e9 then
        return string.format("%.2f G FE", n/1e9)
    elseif n >= 1e6 then
        return string.format("%.2f M FE", n/1e6)
    elseif n >= 1e3 then
        return string.format("%.2f k FE", n/1e3)
    else
        return string.format("%.2f FE", n)
    end
end

-- Write centered text
local function writeCentered(row, text, color)
    local w,_ = mon.getSize()
    local x = math.floor((w - #text) / 2) + 1
    mon.setCursorPos(x, row)
    if color then mon.setTextColor(color) end
    mon.write(text)
    mon.setTextColor(defaultColor)
end

-- Display all reactors
local function displayReactors()
    mon.clear()
    local row = 1
    -- Header
    writeCentered(row, "Fusion Reactor Fuel", headerColor)
    row = row + 2

    -- Reactors
    for name, value in pairs(reactors) do
        writeCentered(row, name, reactorNameColor)
        row = row + 1
        writeCentered(row, formatFE(value), feColor)
        row = row + 2
    end
end

-- Open modem port
modem.open(0)

-- Main loop
while true do
    local event, side, channel, replyChannel, message, distance = os.pullEvent("modem_message")
    if type(message) == "table" and message.name and message.value then
        reactors[message.name] = message.value
        displayReactors() -- sofort aktualisieren
    end
end
